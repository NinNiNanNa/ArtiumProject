<?xml version="1.0" encoding="UTF-8"?>

<!-- 마이바티스 Doctype 설정 -->
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- Controller에서 Mapper의 함수를 호출하기 위한 interface를 namespace
속성에 설정한다. -->
<mapper namespace="com.edu.springboot.mate.IMateService">
	
	<!-- 목록에서 게시물의 갯수를 카운트 하여 정수로 반환한다. <select> 엘리먼트의 경우
	select한 결과를 List로 반환하는것이 default이므로 정수값을 반환하기 위해 resultType을
	int로 지정해야한다.  -->
	<select id="getTotalCount" resultType="int" 
		parameterType="com.edu.springboot.mate.ParameterDTO">
		SELECT COUNT(*) from mate
		<!-- 검색어가 null, 빈값이 아닐때만 where 절을 동적으로 추가한다. -->
		<if test="searchKeyword!=null 
			and !searchKeyword.equals('')"> 
			WHERE ${searchField} LIKE '%'||#{searchKeyword}||'%'
		</if>
	</select>
	
	<!-- 리스트 출력 -->
	<select id="listPage" 
		resultType="com.edu.springboot.mate.MateDTO"
		parameterType="com.edu.springboot.mate.ParameterDTO">			
		SELECT * FROM (
		    SELECT Tb.*, rownum rNum FROM (
		        SELECT * FROM mate 
		        <if test="searchKeyword!=null 
		        	and !searchKeyword.equals('')"> 
				WHERE ${searchField} LIKE 
							'%'||#{searchKeyword}||'%'
				</if>
		        ORDER BY mt_id DESC
		    ) Tb  
		) 
		WHERE rNum<![CDATA[>=]]>#{start} AND rNum<![CDATA[<=]]>#{end}		
	</select>
	
	<!-- 작성하기 -->
	<insert id="write">
    INSERT INTO mate (
        mt_id,  
        mt_status, 
        mt_title, 
        mt_viewdate, 
        mt_gender, 
        mt_age, 
        mt_content
    )
    VALUES(
        seq_board_num.nextval, 
        #{_mt_status}, 
        #{_mt_title}, 
        #{_mt_viewdate}, 
        #{_mt_gender}, 
        #{_mt_age}, 
        #{_mt_content}
    ) 
	</insert>

<select id="view" resultType="com.edu.springboot.mate.MateDTO" 
		parameterType="com.edu.springboot.mate.MateDTO">
		SELECT * FROM mate WHERE mt_id=#{mt_id}
</select>
<!--조회수-->	
<update id="visitCount" parameterType="com.edu.springboot.mate.MateDTO">
			UPDATE mate SET mt_visitcount=mt_visitcount+1 WHERE mt_id=#{mt_id}
</update>
		
<!-- 수정하기 -->		
<update id="Edit" parameterType="com.edu.springboot.mate.MateDTO">
		UPDATE mate SET 
		mt_status=#{mt_status}, 
        mt_title=#{mt_title}, 
        mt_viewdate=#{mt_viewdate}, 
        mt_gender=#{mt_gender}, 
        mt_age=#{mt_age}, 
        mt_content=#{mt_content}
		WHERE mt_id=#{mt_id}
</update>


<!-- 삭제하기 -->
<delete id="delete">
		DELETE FROM mate WHERE mt_id=#{mt_id}
</delete>
	
	<!--<select id="view" resultType="com.edu.springboot.jdbc.MateDTO" 
		parameterType="com.edu.springboot.jdbc.MateDTO">
		SELECT * FROM mate WHERE idx=#{idx}
	</select>
	
	<insert id="write">
		INSERT INTO mate (idx, name, title, content)
		VALUES
		(seq_board_num.nextval, #{_name}, #{_title}, #{_content}) 
	</insert>-->
	
	<!-- <insert id="write">
		INSERT INTO mate (idx, name, title, content)
		VALUES
		(seq_board_num.nextval, #{_name}, #{_title}, #{_content}) 
	</insert>
	
	<select id="view" resultType="com.edu.springboot.jdbc.BoardDTO" 
		parameterType="com.edu.springboot.jdbc.BoardDTO">
		SELECT * FROM mate WHERE idx=#{idx}
	</select>	
	
	<update id="edit" parameterType="com.edu.springboot.jdbc.BoardDTO">
		UPDATE mate SET 
		name=#{name}, title=#{title}, content=#{content}
		WHERE idx=#{idx}
	</update>
	
	<delete id="delete">
		DELETE FROM mate WHERE idx=#{param1}
	</delete>-->
	 	 
</mapper>